<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <package name="retro-gtk-0.14"/>
  <c:include name="retro-gtk.h"/>
  <namespace name="Retro"
             version="0.14"
             shared-library="libretro-gtk-0.14.so.0"
             c:identifier-prefixes="Retro"
             c:symbol-prefixes="retro">
    <enumeration name="AnalogId"
                 glib:type-name="RetroAnalogId"
                 glib:get-type="retro_analog_id_get_type"
                 c:type="RetroAnalogId">
      <doc xml:space="preserve">Represents the axes of the analog sticks for the Libretro gamepad.</doc>
      <member name="x"
              value="0"
              c:identifier="RETRO_ANALOG_ID_X"
              glib:nick="x">
        <doc xml:space="preserve">the X axis of an analog stick</doc>
      </member>
      <member name="y"
              value="1"
              c:identifier="RETRO_ANALOG_ID_Y"
              glib:nick="y">
        <doc xml:space="preserve">the Y axis of an analog stick</doc>
      </member>
      <member name="count"
              value="2"
              c:identifier="RETRO_ANALOG_ID_COUNT"
              glib:nick="count">
        <doc xml:space="preserve">the number of ids</doc>
      </member>
    </enumeration>
    <enumeration name="AnalogIndex"
                 glib:type-name="RetroAnalogIndex"
                 glib:get-type="retro_analog_index_get_type"
                 c:type="RetroAnalogIndex">
      <doc xml:space="preserve">Represents the analog sticks for the Libretro gamepad.</doc>
      <member name="left"
              value="0"
              c:identifier="RETRO_ANALOG_INDEX_LEFT"
              glib:nick="left">
        <doc xml:space="preserve">the left analog stick</doc>
      </member>
      <member name="right"
              value="1"
              c:identifier="RETRO_ANALOG_INDEX_RIGHT"
              glib:nick="right">
        <doc xml:space="preserve">the right analog stick</doc>
      </member>
      <member name="count"
              value="2"
              c:identifier="RETRO_ANALOG_INDEX_COUNT"
              glib:nick="count">
        <doc xml:space="preserve">the number of indexes</doc>
      </member>
    </enumeration>
    <interface name="Controller"
               c:symbol-prefix="controller"
               c:type="RetroController"
               glib:type-name="RetroController"
               glib:get-type="retro_controller_get_type"
               glib:type-struct="ControllerInterface">
      <virtual-method name="get_capabilities" invoker="get_capabilities">
        <doc xml:space="preserve">Gets a flag representing the capabilities of @self. Each bit index matches
the #RetroControllerType of same number.

For example, if @self is an analog gamepad, the value would be: (1 &lt;&lt;
RETRO_CONTROLLER_TYPE_JOYPAD) | (1 &lt;&lt; RETRO_CONTROLLER_TYPE_ANALOG).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the capabilities flag of @self</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroController</doc>
            <type name="Controller" c:type="RetroController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_controller_type" invoker="get_controller_type">
        <doc xml:space="preserve">Gets the main type of the controller.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the controller type of @self</doc>
          <type name="ControllerType" c:type="RetroControllerType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroController</doc>
            <type name="Controller" c:type="RetroController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_input_state" invoker="get_input_state">
        <doc xml:space="preserve">Gets the state of an input of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the input's state</doc>
          <type name="gint16" c:type="gint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroController</doc>
            <type name="Controller" c:type="RetroController*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroInput to query @self</doc>
            <type name="Input" c:type="RetroInput*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="poll" invoker="poll">
        <doc xml:space="preserve">Polls the pending input events for @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroController</doc>
            <type name="Controller" c:type="RetroController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_rumble_state" invoker="set_rumble_state">
        <doc xml:space="preserve">Sets the rumble state of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the rumble state has been successfully set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroController</doc>
            <type name="Controller" c:type="RetroController*"/>
          </instance-parameter>
          <parameter name="effect" transfer-ownership="none">
            <doc xml:space="preserve">the rumble effect</doc>
            <type name="RumbleEffect" c:type="RetroRumbleEffect"/>
          </parameter>
          <parameter name="strength" transfer-ownership="none">
            <doc xml:space="preserve">the rumble effect strength</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_capabilities"
              c:identifier="retro_controller_get_capabilities">
        <doc xml:space="preserve">Gets a flag representing the capabilities of @self. Each bit index matches
the #RetroControllerType of same number.

For example, if @self is an analog gamepad, the value would be: (1 &lt;&lt;
RETRO_CONTROLLER_TYPE_JOYPAD) | (1 &lt;&lt; RETRO_CONTROLLER_TYPE_ANALOG).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the capabilities flag of @self</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroController</doc>
            <type name="Controller" c:type="RetroController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_controller_type"
              c:identifier="retro_controller_get_controller_type">
        <doc xml:space="preserve">Gets the main type of the controller.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the controller type of @self</doc>
          <type name="ControllerType" c:type="RetroControllerType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroController</doc>
            <type name="Controller" c:type="RetroController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_input_state"
              c:identifier="retro_controller_get_input_state">
        <doc xml:space="preserve">Gets the state of an input of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the input's state</doc>
          <type name="gint16" c:type="gint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroController</doc>
            <type name="Controller" c:type="RetroController*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroInput to query @self</doc>
            <type name="Input" c:type="RetroInput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_capability"
              c:identifier="retro_controller_has_capability">
        <doc xml:space="preserve">Gets whether @self has the capability to represent the given controller type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether @self has the capability</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroController</doc>
            <type name="Controller" c:type="RetroController*"/>
          </instance-parameter>
          <parameter name="controller_type" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroControllerType</doc>
            <type name="ControllerType" c:type="RetroControllerType"/>
          </parameter>
        </parameters>
      </method>
      <method name="poll" c:identifier="retro_controller_poll">
        <doc xml:space="preserve">Polls the pending input events for @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroController</doc>
            <type name="Controller" c:type="RetroController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_rumble_state"
              c:identifier="retro_controller_set_rumble_state">
        <doc xml:space="preserve">Sets the rumble state of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the rumble state has been successfully set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroController</doc>
            <type name="Controller" c:type="RetroController*"/>
          </instance-parameter>
          <parameter name="effect" transfer-ownership="none">
            <doc xml:space="preserve">the rumble effect</doc>
            <type name="RumbleEffect" c:type="RetroRumbleEffect"/>
          </parameter>
          <parameter name="strength" transfer-ownership="none">
            <doc xml:space="preserve">the rumble effect strength</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="ControllerInterface"
            c:type="RetroControllerInterface"
            glib:is-gtype-struct-for="Controller">
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="poll">
        <callback name="poll">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">a #RetroController</doc>
              <type name="Controller" c:type="RetroController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_input_state">
        <callback name="get_input_state">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the input's state</doc>
            <type name="gint16" c:type="gint16"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">a #RetroController</doc>
              <type name="Controller" c:type="RetroController*"/>
            </parameter>
            <parameter name="input" transfer-ownership="none">
              <doc xml:space="preserve">a #RetroInput to query @self</doc>
              <type name="Input" c:type="RetroInput*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_controller_type">
        <callback name="get_controller_type">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the controller type of @self</doc>
            <type name="ControllerType" c:type="RetroControllerType"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">a #RetroController</doc>
              <type name="Controller" c:type="RetroController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_capabilities">
        <callback name="get_capabilities">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the capabilities flag of @self</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">a #RetroController</doc>
              <type name="Controller" c:type="RetroController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_rumble_state">
        <callback name="set_rumble_state">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">whether the rumble state has been successfully set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">a #RetroController</doc>
              <type name="Controller" c:type="RetroController*"/>
            </parameter>
            <parameter name="effect" transfer-ownership="none">
              <doc xml:space="preserve">the rumble effect</doc>
              <type name="RumbleEffect" c:type="RetroRumbleEffect"/>
            </parameter>
            <parameter name="strength" transfer-ownership="none">
              <doc xml:space="preserve">the rumble effect strength</doc>
              <type name="guint16" c:type="guint16"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ControllerIterator"
           c:symbol-prefix="controller_iterator"
           c:type="RetroControllerIterator"
           parent="GObject.Object"
           glib:type-name="RetroControllerIterator"
           glib:get-type="retro_controller_iterator_get_type"
           glib:type-struct="ControllerIteratorClass">
      <method name="next" c:identifier="retro_controller_iterator_next">
        <doc xml:space="preserve">Fetch the next #RetroController and the port number it is plugged into.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%FALSE if it reached the end, %TRUE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroControllerIterator</doc>
            <type name="ControllerIterator" c:type="RetroControllerIterator*"/>
          </instance-parameter>
          <parameter name="port"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">return location for the port</doc>
            <type name="guint" c:type="guint**"/>
          </parameter>
          <parameter name="controller"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">return location for the controller</doc>
            <type name="Controller" c:type="RetroController**"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ControllerIteratorClass"
            c:type="RetroControllerIteratorClass"
            glib:is-gtype-struct-for="ControllerIterator">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ControllerType"
                 glib:type-name="RetroControllerType"
                 glib:get-type="retro_controller_type_get_type"
                 c:type="RetroControllerType">
      <doc xml:space="preserve">Represents the base types for Libretro controllers.</doc>
      <member name="none"
              value="0"
              c:identifier="RETRO_CONTROLLER_TYPE_NONE"
              glib:nick="none">
        <doc xml:space="preserve">no controller</doc>
      </member>
      <member name="joypad"
              value="1"
              c:identifier="RETRO_CONTROLLER_TYPE_JOYPAD"
              glib:nick="joypad">
        <doc xml:space="preserve">a classic gamepad</doc>
      </member>
      <member name="mouse"
              value="2"
              c:identifier="RETRO_CONTROLLER_TYPE_MOUSE"
              glib:nick="mouse">
        <doc xml:space="preserve">a simple mouse</doc>
      </member>
      <member name="keyboard"
              value="3"
              c:identifier="RETRO_CONTROLLER_TYPE_KEYBOARD"
              glib:nick="keyboard">
        <doc xml:space="preserve">a keyboard</doc>
      </member>
      <member name="lightgun"
              value="4"
              c:identifier="RETRO_CONTROLLER_TYPE_LIGHTGUN"
              glib:nick="lightgun">
        <doc xml:space="preserve">a lightgun</doc>
      </member>
      <member name="analog"
              value="5"
              c:identifier="RETRO_CONTROLLER_TYPE_ANALOG"
              glib:nick="analog">
        <doc xml:space="preserve">a gamepad with analog sticks</doc>
      </member>
      <member name="pointer"
              value="6"
              c:identifier="RETRO_CONTROLLER_TYPE_POINTER"
              glib:nick="pointer">
        <doc xml:space="preserve">a screen pointer</doc>
      </member>
      <member name="count"
              value="7"
              c:identifier="RETRO_CONTROLLER_TYPE_COUNT"
              glib:nick="count">
        <doc xml:space="preserve">the number of types</doc>
      </member>
      <member name="type_mask"
              value="255"
              c:identifier="RETRO_CONTROLLER_TYPE_TYPE_MASK"
              glib:nick="type-mask">
        <doc xml:space="preserve">a mask to get the super type of a derived one</doc>
      </member>
    </enumeration>
    <class name="Core"
           c:symbol-prefix="core"
           c:type="RetroCore"
           parent="GObject.Object"
           glib:type-name="RetroCore"
           glib:get-type="retro_core_get_type"
           glib:type-struct="CoreClass">
      <constructor name="new" c:identifier="retro_core_new">
        <doc xml:space="preserve">Creates a new #RetroCore.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroCore</doc>
          <type name="Core" c:type="RetroCore*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">the filename of a Libretro core</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="boot" c:identifier="retro_core_boot" throws="1">
        <doc xml:space="preserve">This initializes @self, loads its available options and loads the medias. You
need to boot @self before using some of its methods.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_api_version" c:identifier="retro_core_get_api_version">
        <doc xml:space="preserve">Gets the Libretro API version implement by the core.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the API version</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_access_state"
              c:identifier="retro_core_get_can_access_state">
        <doc xml:space="preserve">Gets whether the state of @self can be accessed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the state of @self can be accessed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_content_directory"
              c:identifier="retro_core_get_content_directory">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filename" c:identifier="retro_core_get_filename">
        <doc xml:space="preserve">Gets the filename of the core.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the filename of the core</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_frames_per_second"
              c:identifier="retro_core_get_frames_per_second">
        <doc xml:space="preserve">Gets the FPS rate for the core's video output.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the FPS rate for the core's video output</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_game_loaded" c:identifier="retro_core_get_game_loaded">
        <doc xml:space="preserve">Gets whether a game has been loaded.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether a game has been loaded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_initiated"
              c:identifier="retro_core_get_is_initiated">
        <doc xml:space="preserve">Gets whether the core has been initiated.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the core has been initiated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_memory" c:identifier="retro_core_get_memory">
        <doc xml:space="preserve">Gets a memory region of @self.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GBytes, or %NULL</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="memory_type" transfer-ownership="none">
            <doc xml:space="preserve">the type of memory</doc>
            <type name="MemoryType" c:type="RetroMemoryType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_memory_size" c:identifier="retro_core_get_memory_size">
        <doc xml:space="preserve">Gets the size of a memory region of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the size of a memory region</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="memory_type" transfer-ownership="none">
            <doc xml:space="preserve">the type of memory</doc>
            <type name="MemoryType" c:type="RetroMemoryType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_option" c:identifier="retro_core_get_option">
        <doc xml:space="preserve">Gets the option for the given key.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the option</doc>
          <type name="Option" c:type="RetroOption*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the key of the option</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_runahead" c:identifier="retro_core_get_runahead">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_save_directory"
              c:identifier="retro_core_get_save_directory">
        <doc xml:space="preserve">Gets the save directory of the core.

The core will save some data here.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the save directory of the core</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="retro_core_get_state" throws="1">
        <doc xml:space="preserve">Gets the state of @self.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GBytes, or %NULL</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_support_no_game"
              c:identifier="retro_core_get_support_no_game">
        <doc xml:space="preserve">Gets whether the core supports running with no game.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the core supports running with no game</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_system_directory"
              c:identifier="retro_core_get_system_directory">
        <doc xml:space="preserve">Gets the system directory of the core.

The core will look here for additional data, such as firmware ROMs or
configuration files.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the system directory of the core</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_option" c:identifier="retro_core_has_option">
        <doc xml:space="preserve">Gets whether the core has an option for the given key.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the core has an option for the given key</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the key of the option</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="iterate_controllers"
              c:identifier="retro_core_iterate_controllers">
        <doc xml:space="preserve">Creates a new #RetroControllerIterator which can be used to iterate through
the controllers plugged into @self.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroControllerIterator</doc>
          <type name="ControllerIterator" c:type="RetroControllerIterator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="iterate_options" c:identifier="retro_core_iterate_options">
        <doc xml:space="preserve">Creates a new #RetroOptionIterator which can be used to iterate through the
options of @self.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroOptionIterator</doc>
          <type name="OptionIterator" c:type="RetroOptionIterator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="retro_core_reset">
        <doc xml:space="preserve">Resets @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="retro_core_run">
        <doc xml:space="preserve">Iterate @self for a frame.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_content_directory"
              c:identifier="retro_core_set_content_directory">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="content_directory" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_controller" c:identifier="retro_core_set_controller">
        <doc xml:space="preserve">Plugs @controller into the specified port number of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve">the port number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="controller"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #RetroController</doc>
            <type name="Controller" c:type="RetroController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_media"
              c:identifier="retro_core_set_current_media"
              throws="1">
        <doc xml:space="preserve">Sets the current media index.

You can use this after booting the core.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="media_index" transfer-ownership="none">
            <doc xml:space="preserve">the media index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_controller"
              c:identifier="retro_core_set_default_controller">
        <doc xml:space="preserve">Uses @controller as the default controller for the given type. When a port
has no controller plugged plugged into it, the core will use the default
controllers instead.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="controller_type" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroControllerType</doc>
            <type name="ControllerType" c:type="RetroControllerType"/>
          </parameter>
          <parameter name="controller"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #RetroController</doc>
            <type name="Controller" c:type="RetroController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keyboard" c:identifier="retro_core_set_keyboard">
        <doc xml:space="preserve">Sets the widget whose key events will be forwarded to @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GtkWidget, or %NULL</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_medias" c:identifier="retro_core_set_medias">
        <doc xml:space="preserve">Sets the medias to load into the core.

You can use this before booting the core.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="uris" transfer-ownership="none">
            <doc xml:space="preserve">the URIs</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_memory" c:identifier="retro_core_set_memory">
        <doc xml:space="preserve">Sets a memory region of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="memory_type" transfer-ownership="none">
            <doc xml:space="preserve">the type of memory</doc>
            <type name="MemoryType" c:type="RetroMemoryType"/>
          </parameter>
          <parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve">a #GBytes</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_runahead" c:identifier="retro_core_set_runahead">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="runahead" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_save_directory"
              c:identifier="retro_core_set_save_directory">
        <doc xml:space="preserve">Sets the save directory of the core.

The core will save some data here.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="save_directory" transfer-ownership="none">
            <doc xml:space="preserve">the save directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state" c:identifier="retro_core_set_state" throws="1">
        <doc xml:space="preserve">Sets the state of the @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve">a #GBytes</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_system_directory"
              c:identifier="retro_core_set_system_directory">
        <doc xml:space="preserve">Sets the system directory of the core.

The core will look here for additional data, such as firmware ROMs or
configuration files.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </instance-parameter>
          <parameter name="system_directory" transfer-ownership="none">
            <doc xml:space="preserve">the system directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="api-version" transfer-ownership="none">
        <doc xml:space="preserve">The Libretro API version implement by the core.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="content-directory"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="filename" transfer-ownership="none">
        <doc xml:space="preserve">The filename of the core.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="frames-per-second" transfer-ownership="none">
        <doc xml:space="preserve">The FPS rate for the core's video output.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="game-loaded" transfer-ownership="none">
        <doc xml:space="preserve">Whether a game has been loaded.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-initiated" transfer-ownership="none">
        <doc xml:space="preserve">Whether the core has been initiated.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="runahead" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The number of frame to run ahead of time.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="save-directory" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The save directory of the core.

The core will save some data here.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="support-no-game" transfer-ownership="none">
        <doc xml:space="preserve">Whether the core supports running with no game.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="system-directory" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The system directory of the core.

The core will look here for additional data, such as firmware ROMs or
configuration files.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="audio-output" when="last">
        <doc xml:space="preserve">The ::audio-output signal is emitted each time a new audio frame is emitted
by the core.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">the audio frame data</doc>
            <array length="1" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">the lentgh of @data</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="sample_rate" transfer-ownership="none">
            <doc xml:space="preserve">the sample rate to play the frame</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="log" when="last">
        <doc xml:space="preserve">The ::log signal is emitted each time the core emits a message to log.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="log_domain" transfer-ownership="none">
            <doc xml:space="preserve">the log domain</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="log_level" transfer-ownership="none">
            <doc xml:space="preserve">the log level</doc>
            <type name="GLib.LogLevelFlags" c:type="guint"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the message</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="message" when="last">
        <doc xml:space="preserve">The ::message signal is emitted each time the core emits a message to
display during a given amount of frames.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the request got fulfilled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the message</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="frames" transfer-ownership="none">
            <doc xml:space="preserve">the number of frames the message should be displayed</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="options-set" when="last">
        <doc xml:space="preserve">The ::options-set signal is emitted when the core sets the
options during boot.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="shutdown" when="last">
        <doc xml:space="preserve">The ::shutdown signal is emitted when the core shut down.

The core must be released or re-started in order to function anew.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the request got fulfilled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="video-output" when="last">
        <doc xml:space="preserve">The ::video-output signal is emitted each time a new video frame is emitted
by the core.

@pixdata will be invalid after the signal emission, copy it in some way if
you want to keep it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixdata" transfer-ownership="none">
            <doc xml:space="preserve">the #RetroPixdata</doc>
            <type name="Pixdata" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CoreClass"
            c:type="RetroCoreClass"
            glib:is-gtype-struct-for="Core">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="CoreDescriptor"
           c:symbol-prefix="core_descriptor"
           c:type="RetroCoreDescriptor"
           parent="GObject.Object"
           glib:type-name="RetroCoreDescriptor"
           glib:get-type="retro_core_descriptor_get_type"
           glib:type-struct="CoreDescriptorClass">
      <constructor name="new"
                   c:identifier="retro_core_descriptor_new"
                   throws="1">
        <doc xml:space="preserve">Creates a new #RetroCoreDescriptor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroCoreDescriptor</doc>
          <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">the file name of the core descriptor</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_firmware_md5"
              c:identifier="retro_core_descriptor_get_firmware_md5"
              throws="1">
        <doc xml:space="preserve">Gets the MD5 fingerprint of the firmware file, or %NULL.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a string or %NULL, free it with g_free()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
          <parameter name="firmware" transfer-ownership="none">
            <doc xml:space="preserve">a firmware name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_firmware_path"
              c:identifier="retro_core_descriptor_get_firmware_path"
              throws="1">
        <doc xml:space="preserve">Gets the demanded path to the firmware file, or %NULL.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a string or %NULL, free it with g_free()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
          <parameter name="firmware" transfer-ownership="none">
            <doc xml:space="preserve">a firmware name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_firmware_sha512"
              c:identifier="retro_core_descriptor_get_firmware_sha512"
              throws="1">
        <doc xml:space="preserve">Gets the SHA512 fingerprint of the firmware file, or %NULL.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a string or %NULL, free it with g_free()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
          <parameter name="firmware" transfer-ownership="none">
            <doc xml:space="preserve">a firmware name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_firmwares"
              c:identifier="retro_core_descriptor_get_firmwares"
              throws="1">
        <doc xml:space="preserve">Gets the list of firmwares used by the core for this platform.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a %NULL-terminated string array or %NULL, the array should
be freed with g_strfreev()</doc>
          <array length="1" zero-terminated="1" c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
          <parameter name="platform" transfer-ownership="none">
            <doc xml:space="preserve">a platform name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">return location for the number of returned
strings, or %NULL</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon"
              c:identifier="retro_core_descriptor_get_icon"
              throws="1">
        <doc xml:space="preserve">Gets the icon, or %NULL if it doesn't exist.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="retro_core_descriptor_get_id">
        <doc xml:space="preserve">Gets the ID of @self.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the ID of @self, free it with g_free()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_emulator"
              c:identifier="retro_core_descriptor_get_is_emulator"
              throws="1">
        <doc xml:space="preserve">Gets whether the core is an emulator, and hence need games to be loaded.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the core is an emulator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_firmware_mandatory"
              c:identifier="retro_core_descriptor_get_is_firmware_mandatory"
              throws="1">
        <doc xml:space="preserve">Gets whether the firmware is mandatory for the core to function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the firmware is mandatory for the core to function</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
          <parameter name="firmware" transfer-ownership="none">
            <doc xml:space="preserve">a firmware name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_is_game"
              c:identifier="retro_core_descriptor_get_is_game"
              throws="1">
        <doc xml:space="preserve">Gets whether the core is a game, and hence can't load games.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the core is a game</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_type"
              c:identifier="retro_core_descriptor_get_mime_type"
              throws="1">
        <doc xml:space="preserve">Gets the list of MIME types accepted used by the core for this platform.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a %NULL-terminated string array or %NULL, the array should
be freed with g_strfreev()</doc>
          <array length="1" zero-terminated="1" c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
          <parameter name="platform" transfer-ownership="none">
            <doc xml:space="preserve">a platform name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">return location for the number of returned
strings, or %NULL</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_module"
              c:identifier="retro_core_descriptor_get_module"
              throws="1">
        <doc xml:space="preserve">Gets the module file name, or %NULL if it doesn't exist.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a string or %NULL, free it with g_free()</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_module_file"
              c:identifier="retro_core_descriptor_get_module_file"
              throws="1">
        <doc xml:space="preserve">Gets the module file, or %NULL if it doesn't exist.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a #GFile or %NULL</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="retro_core_descriptor_get_name"
              throws="1">
        <doc xml:space="preserve">Gets the name, or %NULL if it doesn't exist.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a string or %NULL, free it with g_free()</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_platform_supports_mime_types"
              c:identifier="retro_core_descriptor_get_platform_supports_mime_types"
              throws="1">
        <doc xml:space="preserve">Gets whether the platform supports all of the given MIME types.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the platform supports all of the given MIME types</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
          <parameter name="platform" transfer-ownership="none">
            <doc xml:space="preserve">a platform name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mime_types" transfer-ownership="none">
            <doc xml:space="preserve">the MIME types</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_uri" c:identifier="retro_core_descriptor_get_uri">
        <doc xml:space="preserve">Gets the URI of the file of @self.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the URI of the file of @self, free it with g_free()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_firmware_md5"
              c:identifier="retro_core_descriptor_has_firmware_md5"
              throws="1">
        <doc xml:space="preserve">Gets whether the firmware declares its MD5 fingerprint.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the firmware declares its MD5 fingerprint</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
          <parameter name="firmware" transfer-ownership="none">
            <doc xml:space="preserve">a firmware name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_firmware_sha512"
              c:identifier="retro_core_descriptor_has_firmware_sha512"
              throws="1">
        <doc xml:space="preserve">Gets whether the firmware declares its SHA512 fingerprint.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the firmware declares its SHA512 fingerprint</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
          <parameter name="firmware" transfer-ownership="none">
            <doc xml:space="preserve">a firmware name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_firmwares"
              c:identifier="retro_core_descriptor_has_firmwares"
              throws="1">
        <doc xml:space="preserve">Gets whether the platform has associated firmwares.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the platform has associated firmwares</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
          <parameter name="platform" transfer-ownership="none">
            <doc xml:space="preserve">a platform name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_icon"
              c:identifier="retro_core_descriptor_has_icon"
              throws="1">
        <doc xml:space="preserve">Gets whether the core has an icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the core has an icon</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_platform"
              c:identifier="retro_core_descriptor_has_platform">
        <doc xml:space="preserve">Gets whether the core descriptor declares the given platform.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the core descriptor declares the given platform</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreDescriptor</doc>
            <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
          </instance-parameter>
          <parameter name="platform" transfer-ownership="none">
            <doc xml:space="preserve">a platform name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="CoreDescriptorClass"
            c:type="RetroCoreDescriptorClass"
            glib:is-gtype-struct-for="CoreDescriptor">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="CoreView"
           c:symbol-prefix="core_view"
           c:type="RetroCoreView"
           parent="Gtk.EventBox"
           glib:type-name="RetroCoreView"
           glib:get-type="retro_core_view_get_type"
           glib:type-struct="CoreViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="retro_core_view_new">
        <doc xml:space="preserve">Creates a new #RetroCoreView.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroCoreView</doc>
          <type name="CoreView" c:type="RetroCoreView*"/>
        </return-value>
      </constructor>
      <method name="as_controller"
              c:identifier="retro_core_view_as_controller">
        <doc xml:space="preserve">Creates a new #RetroController exposing @self as the specified controller
type. The valid controller types are RETRO_CONTROLLER_TYPE_JOYPAD,
RETRO_CONTROLLER_TYPE_MOUSE, RETRO_CONTROLLER_TYPE_KEYBOARD and
RETRO_CONTROLLER_TYPE_POINTER.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroController</doc>
          <type name="Controller" c:type="RetroController*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
          <parameter name="controller_type" transfer-ownership="none">
            <doc xml:space="preserve">the controller type to expose @self as</doc>
            <type name="ControllerType" c:type="RetroControllerType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_can_grab_pointer"
              c:identifier="retro_core_view_get_can_grab_pointer">
        <doc xml:space="preserve">Gets whether the pointer should be grabbed when clicking on the view. This
allows @self to work as a RETRO_CONTROLLER_TYPE_MOUSE instead of a
RETRO_CONTROLLER_TYPE_POINTER.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the pointer should snap to the borders</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_controller_capabilities"
              c:identifier="retro_core_view_get_controller_capabilities">
        <doc xml:space="preserve">Gets a flag representing the capabilities of @self when exposed as a
controller. See retro_controller_get_capabilities() for more information on
the flag.

See retro_core_view_as_controller() to know the capabilities of
#RetroCoreView when exposed as a controller.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the capabilities flag of @self when exposed as a controller</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_input_state"
              c:identifier="retro_core_view_get_input_state">
        <doc xml:space="preserve">Gets the state of an input of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the input's state</doc>
          <type name="gint16" c:type="gint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroInput to query @self</doc>
            <type name="Input" c:type="RetroInput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_key_joypad_mapping"
              c:identifier="retro_core_view_get_key_joypad_mapping">
        <doc xml:space="preserve">Gets the currently set key joypad mapping.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #RetroKeyJoypadMapping</doc>
          <type name="KeyJoypadMapping" c:type="RetroKeyJoypadMapping*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf" c:identifier="retro_core_view_get_pixbuf">
        <doc xml:space="preserve">Gets the currently displayed video frame.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap_pointer_to_borders"
              c:identifier="retro_core_view_get_snap_pointer_to_borders">
        <doc xml:space="preserve">Gets whether the pointer should be considered to be at the border of the
video display when it is outside of it. This is used when @self is exposed as
a RETRO_CONTROLLER_TYPE_POINTER.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the pointer should snap to the borders</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_as_default_controller"
              c:identifier="retro_core_view_set_as_default_controller">
        <doc xml:space="preserve">Sets the @self as the default controllers of @core.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
          <parameter name="core"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Core" c:type="RetroCore*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_grab_pointer"
              c:identifier="retro_core_view_set_can_grab_pointer">
        <doc xml:space="preserve">Sets whether the pointer should be grabbed when clicking on the view. This
allows @self to work as a RETRO_CONTROLLER_TYPE_MOUSE instead of a
RETRO_CONTROLLER_TYPE_POINTER.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
          <parameter name="can_grab_pointer" transfer-ownership="none">
            <doc xml:space="preserve">whether the pointer should be grabbed when clicking on
the view</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_core" c:identifier="retro_core_view_set_core">
        <doc xml:space="preserve">Sets @core as the #RetroCore handled by @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
          <parameter name="core"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #RetroCore, or %NULL</doc>
            <type name="Core" c:type="RetroCore*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filter" c:identifier="retro_core_view_set_filter">
        <doc xml:space="preserve">Sets the video filter to use to render the core's video on @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroVideoFilter</doc>
            <type name="VideoFilter" c:type="RetroVideoFilter"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_key_joypad_mapping"
              c:identifier="retro_core_view_set_key_joypad_mapping">
        <doc xml:space="preserve">Sets the key joypad mapping on @self. If given mapping is %NULL, then set to
an empty configuration.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
          <parameter name="mapping"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #RetroKeyJoypadMapping</doc>
            <type name="KeyJoypadMapping" c:type="RetroKeyJoypadMapping*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pixbuf" c:identifier="retro_core_view_set_pixbuf">
        <doc xml:space="preserve">Sets @pixbuf as the currently displayed video frame.

retro_pixbuf_set_aspect_ratio() can be used to specify the aspect ratio for
the pixbuf. Otherwise the core's aspect ratio will be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkPixbuf</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_snap_pointer_to_borders"
              c:identifier="retro_core_view_set_snap_pointer_to_borders">
        <doc xml:space="preserve">Sets whether the pointer should be considered to be at the border of the
video display when it is outside of it. This is used when @self is exposed as
a RETRO_CONTROLLER_TYPE_POINTER.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCoreView</doc>
            <type name="CoreView" c:type="RetroCoreView*"/>
          </instance-parameter>
          <parameter name="snap_pointer_to_borders" transfer-ownership="none">
            <doc xml:space="preserve">whether the pointer should snap to the borders</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-grab-pointer" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="snap-pointer-to-borders"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="CoreViewClass"
            c:type="RetroCoreViewClass"
            glib:is-gtype-struct-for="CoreView">
      <field name="parent_class">
        <type name="Gtk.EventBoxClass" c:type="GtkEventBoxClass"/>
      </field>
    </record>
    <union name="Input"
           c:type="RetroInput"
           glib:type-name="RetroInput"
           glib:get-type="retro_input_get_type"
           c:symbol-prefix="input">
      <constructor name="new" c:identifier="retro_input_new">
        <doc xml:space="preserve">Creates a new #RetroInput.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroInput, use retro_input_free() to free
it</doc>
          <type name="Input" c:type="RetroInput*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="retro_input_copy">
        <doc xml:space="preserve">Copies @self into a new #RetroInput.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroInput, use retro_input_free() to free
it</doc>
          <type name="Input" c:type="RetroInput*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroInput</doc>
            <type name="Input" c:type="RetroInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="retro_input_free">
        <doc xml:space="preserve">Frees the given #RetroInput.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroInput</doc>
            <type name="Input" c:type="RetroInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_analog" c:identifier="retro_input_get_analog">
        <doc xml:space="preserve">Gets the analog id and index of %self, if any.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the id and the index were retrieved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroInput</doc>
            <type name="Input" c:type="RetroInput*"/>
          </instance-parameter>
          <parameter name="id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">return location for the id</doc>
            <type name="AnalogId" c:type="RetroAnalogId*"/>
          </parameter>
          <parameter name="index"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">return location for the index</doc>
            <type name="AnalogIndex" c:type="RetroAnalogIndex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_controller_type"
              c:identifier="retro_input_get_controller_type">
        <doc xml:space="preserve">Gets the controller type of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the controller type of @self</doc>
          <type name="ControllerType" c:type="RetroControllerType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroInput</doc>
            <type name="Input" c:type="RetroInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_joypad" c:identifier="retro_input_get_joypad">
        <doc xml:space="preserve">Gets the joypad id of %self, if any.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the id was retrieved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroInput</doc>
            <type name="Input" c:type="RetroInput*"/>
          </instance-parameter>
          <parameter name="id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">return location for the id</doc>
            <type name="JoypadId" c:type="RetroJoypadId*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_lightgun" c:identifier="retro_input_get_lightgun">
        <doc xml:space="preserve">Gets the lightgun id of %self, if any.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the id was retrieved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroInput</doc>
            <type name="Input" c:type="RetroInput*"/>
          </instance-parameter>
          <parameter name="id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">return location for the id</doc>
            <type name="LightgunId" c:type="RetroLightgunId*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mouse" c:identifier="retro_input_get_mouse">
        <doc xml:space="preserve">Gets the mouse id of %self, if any.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the id was retrieved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroInput</doc>
            <type name="Input" c:type="RetroInput*"/>
          </instance-parameter>
          <parameter name="id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">return location for the id</doc>
            <type name="MouseId" c:type="RetroMouseId*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pointer" c:identifier="retro_input_get_pointer">
        <doc xml:space="preserve">Gets the pointer id of %self, if any.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the id was retrieved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroInput</doc>
            <type name="Input" c:type="RetroInput*"/>
          </instance-parameter>
          <parameter name="id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">return location for the id</doc>
            <type name="PointerId" c:type="RetroPointerId*"/>
          </parameter>
        </parameters>
      </method>
    </union>
    <enumeration name="JoypadId"
                 glib:type-name="RetroJoypadId"
                 glib:get-type="retro_joypad_id_get_type"
                 c:type="RetroJoypadId">
      <doc xml:space="preserve">Represents the buttons for the Libretro gamepad. The available buttons are
the same as the W3C Standard Gamepad, the SDL GameController and many other
modern standard gamepads, but the name of the buttons may differ. See the
&lt;ulink url="https://w3c.github.io/gamepad/"&gt;W3C Gamepad Specification&lt;/ulink&gt;
and the &lt;ulink url="https://wiki.libsdl.org/CategoryGameController"&gt;SDL
GamepadController definition&lt;/ulink&gt; for more information.</doc>
      <member name="b"
              value="0"
              c:identifier="RETRO_JOYPAD_ID_B"
              glib:nick="b">
        <doc xml:space="preserve">the bottom action button</doc>
      </member>
      <member name="y"
              value="1"
              c:identifier="RETRO_JOYPAD_ID_Y"
              glib:nick="y">
        <doc xml:space="preserve">the left action button</doc>
      </member>
      <member name="select"
              value="2"
              c:identifier="RETRO_JOYPAD_ID_SELECT"
              glib:nick="select">
        <doc xml:space="preserve">the Select button</doc>
      </member>
      <member name="start"
              value="3"
              c:identifier="RETRO_JOYPAD_ID_START"
              glib:nick="start">
        <doc xml:space="preserve">the Start button</doc>
      </member>
      <member name="up"
              value="4"
              c:identifier="RETRO_JOYPAD_ID_UP"
              glib:nick="up">
        <doc xml:space="preserve">the up directional button</doc>
      </member>
      <member name="down"
              value="5"
              c:identifier="RETRO_JOYPAD_ID_DOWN"
              glib:nick="down">
        <doc xml:space="preserve">the down directional button</doc>
      </member>
      <member name="left"
              value="6"
              c:identifier="RETRO_JOYPAD_ID_LEFT"
              glib:nick="left">
        <doc xml:space="preserve">the left directional button</doc>
      </member>
      <member name="right"
              value="7"
              c:identifier="RETRO_JOYPAD_ID_RIGHT"
              glib:nick="right">
        <doc xml:space="preserve">the right directional button</doc>
      </member>
      <member name="a"
              value="8"
              c:identifier="RETRO_JOYPAD_ID_A"
              glib:nick="a">
        <doc xml:space="preserve">the right action button</doc>
      </member>
      <member name="x"
              value="9"
              c:identifier="RETRO_JOYPAD_ID_X"
              glib:nick="x">
        <doc xml:space="preserve">the top action button</doc>
      </member>
      <member name="l"
              value="10"
              c:identifier="RETRO_JOYPAD_ID_L"
              glib:nick="l">
        <doc xml:space="preserve">the first left shoulder button</doc>
      </member>
      <member name="r"
              value="11"
              c:identifier="RETRO_JOYPAD_ID_R"
              glib:nick="r">
        <doc xml:space="preserve">the first right shoulder button</doc>
      </member>
      <member name="l2"
              value="12"
              c:identifier="RETRO_JOYPAD_ID_L2"
              glib:nick="l2">
        <doc xml:space="preserve">the second left shoulder button</doc>
      </member>
      <member name="r2"
              value="13"
              c:identifier="RETRO_JOYPAD_ID_R2"
              glib:nick="r2">
        <doc xml:space="preserve">the second right shoulder button</doc>
      </member>
      <member name="l3"
              value="14"
              c:identifier="RETRO_JOYPAD_ID_L3"
              glib:nick="l3">
        <doc xml:space="preserve">the left thumb button</doc>
      </member>
      <member name="r3"
              value="15"
              c:identifier="RETRO_JOYPAD_ID_R3"
              glib:nick="r3">
        <doc xml:space="preserve">the right thumb button</doc>
      </member>
      <member name="count"
              value="16"
              c:identifier="RETRO_JOYPAD_ID_COUNT"
              glib:nick="count">
        <doc xml:space="preserve">the number of ids</doc>
      </member>
      <function name="from_button_code"
                c:identifier="retro_joypad_id_from_button_code">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the corresponding joypad id</doc>
          <type name="JoypadId" c:type="RetroJoypadId"/>
        </return-value>
        <parameters>
          <parameter name="button_code" transfer-ownership="none">
            <doc xml:space="preserve">a button code</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_button_code"
                c:identifier="retro_joypad_id_to_button_code">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the corresponding button code</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <parameter name="joypad_id" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroJoypadId</doc>
            <type name="JoypadId" c:type="RetroJoypadId"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="KeyJoypadMapping"
           c:symbol-prefix="key_joypad_mapping"
           c:type="RetroKeyJoypadMapping"
           parent="GObject.Object"
           glib:type-name="RetroKeyJoypadMapping"
           glib:get-type="retro_key_joypad_mapping_get_type"
           glib:type-struct="KeyJoypadMappingClass">
      <constructor name="new" c:identifier="retro_key_joypad_mapping_new">
        <doc xml:space="preserve">Creates a new #RetroKeyJoypadMapping.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroKeyJoypadMapping</doc>
          <type name="KeyJoypadMapping" c:type="RetroKeyJoypadMapping*"/>
        </return-value>
      </constructor>
      <constructor name="new_default"
                   c:identifier="retro_key_joypad_mapping_new_default">
        <doc xml:space="preserve">Creates a new #RetroKeyJoypadMapping with the default mapping.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroKeyJoypadMapping</doc>
          <type name="KeyJoypadMapping" c:type="RetroKeyJoypadMapping*"/>
        </return-value>
      </constructor>
      <method name="get_button_key"
              c:identifier="retro_key_joypad_mapping_get_button_key">
        <doc xml:space="preserve">Gets the mapping key code for the joypad button id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">mapping key code</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroKeyJoypadMapping</doc>
            <type name="KeyJoypadMapping" c:type="RetroKeyJoypadMapping*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve">joypad button id</doc>
            <type name="JoypadId" c:type="RetroJoypadId"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_button_key"
              c:identifier="retro_key_joypad_mapping_set_button_key">
        <doc xml:space="preserve">Maps the joypad button id to mapping key code.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroKeyJoypadMapping</doc>
            <type name="KeyJoypadMapping" c:type="RetroKeyJoypadMapping*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve">joypad button id</doc>
            <type name="JoypadId" c:type="RetroJoypadId"/>
          </parameter>
          <parameter name="hardware_keycode" transfer-ownership="none">
            <doc xml:space="preserve">mapping key code</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="KeyJoypadMappingClass"
            c:type="RetroKeyJoypadMappingClass"
            glib:is-gtype-struct-for="KeyJoypadMapping">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="LightgunId"
                 glib:type-name="RetroLightgunId"
                 glib:get-type="retro_lightgun_id_get_type"
                 c:type="RetroLightgunId">
      <doc xml:space="preserve">Represents the inputs for the Libretro lightgun.</doc>
      <member name="x"
              value="0"
              c:identifier="RETRO_LIGHTGUN_ID_X"
              glib:nick="x">
        <doc xml:space="preserve">the X axis of a lightgun</doc>
      </member>
      <member name="y"
              value="1"
              c:identifier="RETRO_LIGHTGUN_ID_Y"
              glib:nick="y">
        <doc xml:space="preserve">the Y axis of a lightgun</doc>
      </member>
      <member name="trigger"
              value="2"
              c:identifier="RETRO_LIGHTGUN_ID_TRIGGER"
              glib:nick="trigger">
        <doc xml:space="preserve">the trigger of a lightgun</doc>
      </member>
      <member name="cursor"
              value="3"
              c:identifier="RETRO_LIGHTGUN_ID_CURSOR"
              glib:nick="cursor">
        <doc xml:space="preserve">the cursor of a lightgun</doc>
      </member>
      <member name="turbo"
              value="4"
              c:identifier="RETRO_LIGHTGUN_ID_TURBO"
              glib:nick="turbo">
        <doc xml:space="preserve">the turbo button of a lightgun</doc>
      </member>
      <member name="pause"
              value="5"
              c:identifier="RETRO_LIGHTGUN_ID_PAUSE"
              glib:nick="pause">
        <doc xml:space="preserve">the pause button of a lightgun</doc>
      </member>
      <member name="start"
              value="6"
              c:identifier="RETRO_LIGHTGUN_ID_START"
              glib:nick="start">
        <doc xml:space="preserve">the start button of a lightgun</doc>
      </member>
      <member name="count"
              value="7"
              c:identifier="RETRO_LIGHTGUN_ID_COUNT"
              glib:nick="count">
        <doc xml:space="preserve">the number of ids</doc>
      </member>
    </enumeration>
    <class name="MainLoop"
           c:symbol-prefix="main_loop"
           c:type="RetroMainLoop"
           parent="GObject.Object"
           glib:type-name="RetroMainLoop"
           glib:get-type="retro_main_loop_get_type"
           glib:type-struct="MainLoopClass">
      <constructor name="new" c:identifier="retro_main_loop_new">
        <doc xml:space="preserve">Creates a new #RetroMainLoop.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroMainLoop</doc>
          <type name="MainLoop" c:type="RetroMainLoop*"/>
        </return-value>
        <parameters>
          <parameter name="core" transfer-ownership="none">
            <type name="Core" c:type="RetroCore*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_core" c:identifier="retro_main_loop_get_core">
        <doc xml:space="preserve">Gets the core handled by @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #RetroCore</doc>
          <type name="Core" c:type="RetroCore*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroMainLoop</doc>
            <type name="MainLoop" c:type="RetroMainLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_speed_rate"
              c:identifier="retro_main_loop_get_speed_rate">
        <doc xml:space="preserve">Gets the speed rate at which to run the core.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the speed rate</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroMainLoop</doc>
            <type name="MainLoop" c:type="RetroMainLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="retro_main_loop_reset">
        <doc xml:space="preserve">Resets the core. Results depend on the core's implementation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroMainLoop</doc>
            <type name="MainLoop" c:type="RetroMainLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_core" c:identifier="retro_main_loop_set_core">
        <doc xml:space="preserve">Sets @core as the #RetroCore handled by @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroMainLoop</doc>
            <type name="MainLoop" c:type="RetroMainLoop*"/>
          </instance-parameter>
          <parameter name="core"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #RetroCore, or %NULL</doc>
            <type name="Core" c:type="RetroCore*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_speed_rate"
              c:identifier="retro_main_loop_set_speed_rate">
        <doc xml:space="preserve">Sets the speed rate at which to run the core.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroMainLoop</doc>
            <type name="MainLoop" c:type="RetroMainLoop*"/>
          </instance-parameter>
          <parameter name="speed_rate" transfer-ownership="none">
            <doc xml:space="preserve">a speed rate</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="retro_main_loop_start">
        <doc xml:space="preserve">Starts runing the core. If the core was stopped, it will restart from this moment.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroMainLoop</doc>
            <type name="MainLoop" c:type="RetroMainLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="retro_main_loop_stop">
        <doc xml:space="preserve">Stops runing the core.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroMainLoop</doc>
            <type name="MainLoop" c:type="RetroMainLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="core"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Core"/>
      </property>
      <property name="speed-rate"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <record name="MainLoopClass"
            c:type="RetroMainLoopClass"
            glib:is-gtype-struct-for="MainLoop">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="MemoryType" c:type="RetroMemoryType">
      <doc xml:space="preserve">Represents the memory types for the Libretro core.</doc>
      <member name="save_ram"
              value="0"
              c:identifier="RETRO_MEMORY_TYPE_SAVE_RAM">
        <doc xml:space="preserve">the save RAM</doc>
      </member>
      <member name="rtc" value="1" c:identifier="RETRO_MEMORY_TYPE_RTC">
        <doc xml:space="preserve">the real time clock</doc>
      </member>
      <member name="system_ram"
              value="2"
              c:identifier="RETRO_MEMORY_TYPE_SYSTEM_RAM">
        <doc xml:space="preserve">the system RAM</doc>
      </member>
      <member name="video_ram"
              value="3"
              c:identifier="RETRO_MEMORY_TYPE_VIDEO_RAM">
        <doc xml:space="preserve">the video RAM</doc>
      </member>
    </enumeration>
    <class name="ModuleIterator"
           c:symbol-prefix="module_iterator"
           c:type="RetroModuleIterator"
           parent="GObject.Object"
           glib:type-name="RetroModuleIterator"
           glib:get-type="retro_module_iterator_get_type"
           glib:type-struct="ModuleIteratorClass">
      <constructor name="new" c:identifier="retro_module_iterator_new">
        <doc xml:space="preserve">Creates a new #RetroModuleIterator.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroModuleIterator</doc>
          <type name="ModuleIterator" c:type="RetroModuleIterator*"/>
        </return-value>
        <parameters>
          <parameter name="lookup_paths" transfer-ownership="none">
            <doc xml:space="preserve">paths where to look for Libretro
cores</doc>
            <array c:type="const gchar* const*">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve">whether to run the query in sub-directories</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get" c:identifier="retro_module_iterator_get">
        <doc xml:space="preserve">Gets the last #RetroCoreDescriptor fetched by retro_module_iterator_next(),
or %NULL if the end was reached.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a #RetroCoreDescriptor, or %NULL</doc>
          <type name="CoreDescriptor" c:type="RetroCoreDescriptor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroModuleIterator</doc>
            <type name="ModuleIterator" c:type="RetroModuleIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="retro_module_iterator_next">
        <doc xml:space="preserve">Fetch the next #RetroModuleIterator.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%FALSE if it reached the end, %TRUE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroModuleIterator</doc>
            <type name="ModuleIterator" c:type="RetroModuleIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="ModuleIteratorClass"
            c:type="RetroModuleIteratorClass"
            glib:is-gtype-struct-for="ModuleIterator">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ModuleQuery"
           c:symbol-prefix="module_query"
           c:type="RetroModuleQuery"
           parent="GObject.Object"
           glib:type-name="RetroModuleQuery"
           glib:get-type="retro_module_query_get_type"
           glib:type-struct="ModuleQueryClass">
      <constructor name="new" c:identifier="retro_module_query_new">
        <doc xml:space="preserve">Creates a new #RetroModuleQuery.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroModuleQuery</doc>
          <type name="ModuleQuery" c:type="RetroModuleQuery*"/>
        </return-value>
        <parameters>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve">whether to run the query in sub-directories</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="iterator" c:identifier="retro_module_query_iterator">
        <doc xml:space="preserve">Creates a new #RetroModuleIterator.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroModuleIterator</doc>
          <type name="ModuleIterator" c:type="RetroModuleIterator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroModuleQuery</doc>
            <type name="ModuleQuery" c:type="RetroModuleQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="ModuleQueryClass"
            c:type="RetroModuleQueryClass"
            glib:is-gtype-struct-for="ModuleQuery">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="MouseId"
                 glib:type-name="RetroMouseId"
                 glib:get-type="retro_mouse_id_get_type"
                 c:type="RetroMouseId">
      <doc xml:space="preserve">Represents the inputs for the Libretro mouse.</doc>
      <member name="x" value="0" c:identifier="RETRO_MOUSE_ID_X" glib:nick="x">
        <doc xml:space="preserve">the X axis of a mouse</doc>
      </member>
      <member name="y" value="1" c:identifier="RETRO_MOUSE_ID_Y" glib:nick="y">
        <doc xml:space="preserve">the Y axis of a mouse</doc>
      </member>
      <member name="left"
              value="2"
              c:identifier="RETRO_MOUSE_ID_LEFT"
              glib:nick="left">
        <doc xml:space="preserve">the left button of a mouse</doc>
      </member>
      <member name="right"
              value="3"
              c:identifier="RETRO_MOUSE_ID_RIGHT"
              glib:nick="right">
        <doc xml:space="preserve">the right button of a mouse</doc>
      </member>
      <member name="wheelup"
              value="4"
              c:identifier="RETRO_MOUSE_ID_WHEELUP"
              glib:nick="wheelup">
        <doc xml:space="preserve">the up direction of a mouse wheel</doc>
      </member>
      <member name="wheeldown"
              value="5"
              c:identifier="RETRO_MOUSE_ID_WHEELDOWN"
              glib:nick="wheeldown">
        <doc xml:space="preserve">the down direction of a mouse wheel</doc>
      </member>
      <member name="middle"
              value="6"
              c:identifier="RETRO_MOUSE_ID_MIDDLE"
              glib:nick="middle">
        <doc xml:space="preserve">the middle button of a mouse</doc>
      </member>
      <member name="horiz_wheelup"
              value="7"
              c:identifier="RETRO_MOUSE_ID_HORIZ_WHEELUP"
              glib:nick="horiz-wheelup">
        <doc xml:space="preserve">the horizontal up direction of a mouse wheel</doc>
      </member>
      <member name="horiz_wheeldown"
              value="8"
              c:identifier="RETRO_MOUSE_ID_HORIZ_WHEELDOWN"
              glib:nick="horiz-wheeldown">
        <doc xml:space="preserve">the horizontal down direction of a mouse wheel</doc>
      </member>
      <member name="count"
              value="9"
              c:identifier="RETRO_MOUSE_ID_COUNT"
              glib:nick="count">
        <doc xml:space="preserve">the number of ids</doc>
      </member>
    </enumeration>
    <class name="Option"
           c:symbol-prefix="option"
           c:type="RetroOption"
           parent="GObject.Object"
           glib:type-name="RetroOption"
           glib:get-type="retro_option_get_type"
           glib:type-struct="OptionClass">
      <method name="get_description"
              c:identifier="retro_option_get_description">
        <doc xml:space="preserve">Gets the description of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the description of @self</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroOption</doc>
            <type name="Option" c:type="RetroOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_key" c:identifier="retro_option_get_key">
        <doc xml:space="preserve">Gets the key of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the key of @self</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroOption</doc>
            <type name="Option" c:type="RetroOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="retro_option_get_value">
        <doc xml:space="preserve">Gets the value of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of @self</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroOption</doc>
            <type name="Option" c:type="RetroOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_values" c:identifier="retro_option_get_values">
        <doc xml:space="preserve">Gets the value of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the
value of @self</doc>
          <array c:type="const gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroOption</doc>
            <type name="Option" c:type="RetroOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="retro_option_set_value"
              throws="1">
        <doc xml:space="preserve">Sets the value for @self. An error will be thrown if the value is invalid for
@self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroOption</doc>
            <type name="Option" c:type="RetroOption*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="value-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="OptionClass"
            c:type="RetroOptionClass"
            glib:is-gtype-struct-for="Option">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="OptionIterator"
           c:symbol-prefix="option_iterator"
           c:type="RetroOptionIterator"
           parent="GObject.Object"
           glib:type-name="RetroOptionIterator"
           glib:get-type="retro_option_iterator_get_type"
           glib:type-struct="OptionIteratorClass">
      <method name="next" c:identifier="retro_option_iterator_next">
        <doc xml:space="preserve">Fetch the next #RetroOption and its key.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%FALSE if it reached the end, %TRUE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroOptionIterator</doc>
            <type name="OptionIterator" c:type="RetroOptionIterator*"/>
          </instance-parameter>
          <parameter name="key"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">return location for the key</doc>
            <type name="guint" c:type="guint**"/>
          </parameter>
          <parameter name="option"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">return location for the option</doc>
            <type name="Option" c:type="RetroOption**"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="OptionIteratorClass"
            c:type="RetroOptionIteratorClass"
            glib:is-gtype-struct-for="OptionIterator">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="Pixdata"
            c:type="RetroPixdata"
            glib:type-name="RetroPixdata"
            glib:get-type="retro_pixdata_get_type"
            c:symbol-prefix="pixdata">
      <method name="copy" c:identifier="retro_pixdata_copy">
        <doc xml:space="preserve">Copies @self into a new #RetroPixdata.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroPixdata, use retro_pixdata_free() to
free it</doc>
          <type name="Pixdata" c:type="RetroPixdata*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroPixdata</doc>
            <type name="Pixdata" c:type="RetroPixdata*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="retro_pixdata_free">
        <doc xml:space="preserve">Frees the given #RetroPixdata object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroPixdata</doc>
            <type name="Pixdata" c:type="RetroPixdata*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aspect_ratio"
              c:identifier="retro_pixdata_get_aspect_ratio">
        <doc xml:space="preserve">Gets the aspect ratio the video should be rendered with.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the aspect ratio</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Pixdata" c:type="RetroPixdata*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height" c:identifier="retro_pixdata_get_height">
        <doc xml:space="preserve">Gets the height of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the height</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Pixdata" c:type="RetroPixdata*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="retro_pixdata_get_width">
        <doc xml:space="preserve">Gets the width of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the width</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #RetroCore</doc>
            <type name="Pixdata" c:type="RetroPixdata*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_gl_texture"
              c:identifier="retro_pixdata_load_gl_texture">
        <doc xml:space="preserve">Loads an OpenGL texture from @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the loading was successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the #RetroPixdata</doc>
            <type name="Pixdata" c:type="RetroPixdata*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_pixbuf" c:identifier="retro_pixdata_to_pixbuf">
        <doc xml:space="preserve">Creates a new #GdkPixbuf from @self.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #RetroPixdata</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the #RetroPixdata</doc>
            <type name="Pixdata" c:type="RetroPixdata*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="PointerId"
                 glib:type-name="RetroPointerId"
                 glib:get-type="retro_pointer_id_get_type"
                 c:type="RetroPointerId">
      <doc xml:space="preserve">Represents the inputs for the Libretro pointer.</doc>
      <member name="x"
              value="0"
              c:identifier="RETRO_POINTER_ID_X"
              glib:nick="x">
        <doc xml:space="preserve">the X axis of a pointer</doc>
      </member>
      <member name="y"
              value="1"
              c:identifier="RETRO_POINTER_ID_Y"
              glib:nick="y">
        <doc xml:space="preserve">the Y axis of a pointer</doc>
      </member>
      <member name="pressed"
              value="2"
              c:identifier="RETRO_POINTER_ID_PRESSED"
              glib:nick="pressed">
        <doc xml:space="preserve">the pression of a pointer</doc>
      </member>
      <member name="count"
              value="3"
              c:identifier="RETRO_POINTER_ID_COUNT"
              glib:nick="count">
        <doc xml:space="preserve">the number of ids</doc>
      </member>
    </enumeration>
    <enumeration name="RumbleEffect" c:type="RetroRumbleEffect">
      <doc xml:space="preserve">Represents the strength of the rumble effect.</doc>
      <member name="strong"
              value="0"
              c:identifier="RETRO_RUMBLE_EFFECT_STRONG">
        <doc xml:space="preserve">the strong rumble effect</doc>
      </member>
      <member name="weak" value="1" c:identifier="RETRO_RUMBLE_EFFECT_WEAK">
        <doc xml:space="preserve">the weak rumble effect</doc>
      </member>
      <member name="count" value="2" c:identifier="RETRO_RUMBLE_EFFECT_COUNT">
        <doc xml:space="preserve">the number of rumble effects</doc>
      </member>
    </enumeration>
    <enumeration name="VideoFilter"
                 glib:type-name="RetroVideoFilter"
                 glib:get-type="retro_video_filter_get_type"
                 c:type="RetroVideoFilter">
      <doc xml:space="preserve">Represents the filters that can be applied to the video output.</doc>
      <member name="smooth"
              value="0"
              c:identifier="RETRO_VIDEO_FILTER_SMOOTH"
              glib:nick="smooth">
        <doc xml:space="preserve">a smooth but blurry video filer</doc>
      </member>
      <member name="sharp"
              value="1"
              c:identifier="RETRO_VIDEO_FILTER_SHARP"
              glib:nick="sharp">
        <doc xml:space="preserve">a sharp video filter showing every pixel</doc>
      </member>
      <member name="crt"
              value="2"
              c:identifier="RETRO_VIDEO_FILTER_CRT"
              glib:nick="crt">
        <doc xml:space="preserve">a video filter mimicking CRT screens</doc>
      </member>
      <member name="count"
              value="3"
              c:identifier="RETRO_VIDEO_FILTER_COUNT"
              glib:nick="count">
        <doc xml:space="preserve">the number of video filters</doc>
      </member>
      <function name="from_string"
                c:identifier="retro_video_filter_from_string">
        <doc xml:space="preserve">Gets a #RetroVideoFilter from it's name. It defaults to
RETRO_VIDEO_FILTER_SMOOTH in case of error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #RetroVideoFilter</doc>
          <type name="VideoFilter" c:type="RetroVideoFilter"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve">a filter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <function name="g_log" c:identifier="retro_g_log">
      <doc xml:space="preserve">Logs an error or debugging message.

This is a convenience function to forward the log signal of #RetroCore to
g_log(), see it for more information.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="sender" transfer-ownership="none">
          <doc xml:space="preserve">a #RetroCore</doc>
          <type name="Core" c:type="RetroCore*"/>
        </parameter>
        <parameter name="log_domain"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the log domain, usually #G_LOG_DOMAIN, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="log_level" transfer-ownership="none">
          <doc xml:space="preserve">the log level, either from #GLogLevelFlags or a user-defined
level</doc>
          <type name="GLib.LogLevelFlags" c:type="GLogLevelFlags"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve">the message to log</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_get_resource" c:identifier="retro_gtk_get_resource">
      <return-value transfer-ownership="full">
        <type name="Gio.Resource" c:type="GResource*"/>
      </return-value>
    </function>
    <function name="joypad_id_from_button_code"
              c:identifier="retro_joypad_id_from_button_code"
              moved-to="JoypadId.from_button_code">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the corresponding joypad id</doc>
        <type name="JoypadId" c:type="RetroJoypadId"/>
      </return-value>
      <parameters>
        <parameter name="button_code" transfer-ownership="none">
          <doc xml:space="preserve">a button code</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="joypad_id_to_button_code"
              c:identifier="retro_joypad_id_to_button_code"
              moved-to="JoypadId.to_button_code">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the corresponding button code</doc>
        <type name="guint16" c:type="guint16"/>
      </return-value>
      <parameters>
        <parameter name="joypad_id" transfer-ownership="none">
          <doc xml:space="preserve">a #RetroJoypadId</doc>
          <type name="JoypadId" c:type="RetroJoypadId"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_get_aspect_ratio"
              c:identifier="retro_pixbuf_get_aspect_ratio">
      <doc xml:space="preserve">Gets the aspect ratio of @pixbuf by reading the 'aspect-ratio' pixbuf option.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the aspect ratio, or 0 if the option is not set or its value is invalid.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_set_aspect_ratio"
              c:identifier="retro_pixbuf_set_aspect_ratio">
      <doc xml:space="preserve">Sets the aspect ratio of @pixbuf by setting the 'aspect-ratio' pixbuf option.
Use retro_pixbuf_get_aspect_ratio() to retrieve it.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="aspect_ratio" transfer-ownership="none">
          <doc xml:space="preserve">the aspect ratio value</doc>
          <type name="gfloat" c:type="gfloat"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_filter_from_string"
              c:identifier="retro_video_filter_from_string"
              moved-to="VideoFilter.from_string">
      <doc xml:space="preserve">Gets a #RetroVideoFilter from it's name. It defaults to
RETRO_VIDEO_FILTER_SMOOTH in case of error.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a #RetroVideoFilter</doc>
        <type name="VideoFilter" c:type="RetroVideoFilter"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve">a filter name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
